# This Workflow creates a pre-release of the exporter that has been modified.

on: 
  push:
    branches:
      - main

permissions:
  contents: write

env:
  OHAI_PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }} # base64 encoded
  OHAI_PFX_PASSPHRASE:  ${{ secrets.OHAI_PFX_PASSPHRASE }}

###
###   PRE-RELEASE CREATION # Creates a pre-release if needed and loads variables for next jobs
###
name: Create Pre-release
jobs:
  create_prerelease:
    name: Create Pre-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version-file: nri-config-generator/go.mod

      - name: Check if exporters have been modified
        id: check
        # Running shouldDoRelease we check if any exporter.yml has been modified, if so we set CREATE_RELEASE to true setting the variable EXPORTER_PATH
        # That variable is used by the following step and jobs
        run : |
          source ./scripts/common_functions.sh
          shouldDoRelease
          loadVariables $EXPORTER_PATH
          setStepOutput
      - name: Install goreleaser
        if: ${{ steps.check.outputs.CREATE_RELEASE == 'true'}}
        uses: goreleaser/goreleaser-action@v4
        with:
          version: v1.13.1
          install-only: true
      #- name: Compile exporter
      #  if: ${{ steps.check.outputs.CREATE_RELEASE == 'true'}}
      #  run : |
      #    make build-${{ steps.check.outputs.NAME }}
      #- name: e2e-test
      #  if: ${{ steps.check.outputs.CREATE_RELEASE == 'true'}}
      #  uses: newrelic/newrelic-integration-e2e-action@v1
      #  with:
      #    spec_path: exporters/${{ steps.check.outputs.NAME }}/e2e/e2e_spec.yml
      #    account_id: ${{ secrets.COREINT_E2E_ACCOUNT_ID }}
      #    api_key: ${{ secrets.COREINT_E2E_API_KEY }}
      #    license_key: ${{ secrets.COREINT_E2E_LICENSE_KEY }}

      - name: Create Release for the exporter modified
        id: create_release
        if: ${{ steps.check.outputs.CREATE_RELEASE == 'true'}}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check.outputs.PACKAGE_NAME }}-${{ steps.check.outputs.VERSION }}
          name: ${{ steps.check.outputs.PACKAGE_NAME }} ${{ steps.check.outputs.VERSION }}
          prerelease: true
          body: |
            Changes in ${{ steps.check.outputs.PACKAGE_NAME }} version ${{ steps.check.outputs.VERSION }}
              - Exporter repository URL: ${{ steps.check.outputs.EXPORTER_REPO_URL }}
              - Commit or Tag of the exporter packaged: ${{ steps.check.outputs.EXPORTER_HEAD }}
              - CHANGELOG: ${{ steps.check.outputs.EXPORTER_CHANGELOG }}
    outputs:
      CREATE_RELEASE: ${{ steps.check.outputs.CREATE_RELEASE }}
      EXPORTER_PATH: ${{ steps.check.outputs.EXPORTER_PATH }}
      PACKAGE_LINUX: ${{ steps.check.outputs.PACKAGE_LINUX }}
      PACKAGE_WINDOWS: ${{ steps.check.outputs.PACKAGE_WINDOWS }}
      INTEGRATION_NAME: ${{ steps.check.outputs.NAME }}
      INTEGRATION_VERSION: ${{ steps.check.outputs.VERSION }}
      RELEASE_TAG: ${{ steps.check.outputs.PACKAGE_NAME }}-${{ steps.check.outputs.VERSION }}

  build_push_linux_artifacts:
    needs: [create_prerelease]
    name: Push Linux Artifacts
    runs-on: ubuntu-latest
    if: ${{ needs.create_prerelease.outputs.CREATE_RELEASE == 'true' && needs.create_prerelease.outputs.PACKAGE_LINUX == 'true'}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version-file: nri-config-generator/go.mod
      - name: Install goreleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: v1.13.1
          install-only: true
      - name: Install dependencies
        run: |
          sudo apt-get install rpm ruby ruby-dev rubygems build-essential rpm gnupg2 gpg-agent debsigs
          sudo gem install --no-document fpm

      - name: Load variables
        id: vars
        run : |
          export GOPATH=$(go env GOPATH)
          export EXPORTER_PATH=${{ needs.create_prerelease.outputs.EXPORTER_PATH }}
          source ./scripts/common_functions.sh
          loadVariables $EXPORTER_PATH
          setStepOutput
      - name: Package linux
        id: package
        #env:
        #  GPG_MAIL: 'infrastructure-eng@newrelic.com'
        #  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
        #  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }}  # base64 encoded
        run : |
          make package-${{ steps.vars.outputs.NAME }}
      - name: Test package installability
        uses: newrelic/integrations-pkg-test-action/linux@v1
        with:
          tag: ${{ steps.vars.outputs.VERSION }}
          integration: nri-${{ steps.vars.outputs.NAME }}
          upgrade: false
          # Removing suse as they ENFORCE package signing even locally and we are not signing in this test.
          distros: "ubuntu:jammy ubuntu:focal ubuntu:bionic debian:bullseye debian:buster debian:stretch rockylinux:8"
          pkgDir: ./exporters/${{ steps.vars.outputs.NAME }}/target/packages/

      - name: Upload assets to the release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create_prerelease.outputs.RELEASE_TAG }}
          name: ${{ needs.create_prerelease.outputs.INTEGRATION_NAME }} ${{ needs.create_prerelease.outputs.INTEGRATION_VERSION }}
          prerelease: true
          files: |
            ./exporters/${{ steps.vars.outputs.NAME }}/target/packages/*_${{ steps.vars.outputs.VERSION }}-1_*.deb
            ./exporters/${{ steps.vars.outputs.NAME }}/target/packages/*_linux_${{ steps.vars.outputs.VERSION }}_*.tar.gz
            ./exporters/${{ steps.vars.outputs.NAME }}/target/packages/*-${{ steps.vars.outputs.VERSION }}-1.*.rpm


  ###
  ###   Windows Packaging # In case a new release has been created and Windows packages are needed build and push MSI
  ###
  build_push_windows_artifacts:
    name: Create MSI
    runs-on: windows-latest
    needs: [create_prerelease]
    if: ${{ needs.create_prerelease.outputs.CREATE_RELEASE == 'true' && needs.create_prerelease.outputs.PACKAGE_WINDOWS == 'true' }}
    env:
      GOPATH: ${{ github.workspace }}
      GOOS: windows
    defaults:
      run:
        working-directory: src/repo
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: src/repo
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version-file: src/repo/nri-config-generator/go.mod
      - name: Install goreleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: v1.13.1
          install-only: true
      #- name: Get PFX certificate from GH secrets
      #  shell: bash
      #  run: printf "%s" "$OHAI_PFX_CERTIFICATE_BASE64" | base64 -d - > mycert.pfx

      - name: Load Variables
        id: vars
        shell: bash
        run: |
          choco install yq
          export EXPORTER_PATH=${{ needs.create_prerelease.outputs.EXPORTER_PATH }}
          source ./scripts/common_functions.sh
          loadVariables $EXPORTER_PATH
          setStepOutput
      - name: Build windows binary
        id: package
        shell: bash
        run : |
          make package-${{ steps.vars.outputs.NAME }}
      - name: Test win packages installation
        uses: newrelic/integrations-pkg-test-action/windows@v1
        with:
          tag: ${{ steps.vars.outputs.VERSION  }}
          integration: nri-${{ steps.vars.outputs.NAME }}
          arch: amd64
          pkgDir: ${{ github.workspace }}\src\repo\exporters\${{ steps.vars.outputs.NAME }}\target\packages
          pkgName: ${{ steps.vars.outputs.PACKAGE_NAME }}-amd64.${{ steps.vars.outputs.VERSION }}.msi
          upgrade: false
      - name: Upload assets to the release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create_prerelease.outputs.RELEASE_TAG }}
          name: ${{ needs.create_prerelease.outputs.INTEGRATION_NAME }} ${{ needs.create_prerelease.outputs.INTEGRATION_VERSION }}
          prerelease: true
          files: |
            ${{ github.workspace }}\src\repo\exporters\${{ steps.vars.outputs.NAME }}\target\packages\*.msi

  publish-to-s3:
    name: Send release assets to S3
    runs-on: ubuntu-latest
    needs: [ create_prerelease, build_push_linux_artifacts, build_push_windows_artifacts ]
    steps:
      - run: |
          make create-publish-schema-${{ needs.create_prerelease.outputs.INTEGRATION_NAME }}

#      - name: Publish to S3 action
#        uses: newrelic/infrastructure-publish-action@v1
#        env:
#          AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
#          AWS_S3_LOCK_BUCKET_NAME: "onhost-ci-lock-staging"
#        with:
#          disable_lock: false
#          run_id: ${{ github.run_id }}
#          tag: ${{ needs.create_prerelease.outputs.RELEASE_TAG }}
#          app_version: ${{ needs.create_prerelease.outputs.INTEGRATION_VERSION }}
#          app_name: nri-${{ needs.create_prerelease.outputs.INTEGRATION_NAME }}
#          repo_name: ${{ github.event.repository.full_name }}
#          schema: "custom"
#          schema_url: "https://raw.githubusercontent.com/${{ github.event.repository.full_name }}/${{ needs.create_prerelease.outputs.RELEASE_TAG }}/scripts/s3-publish-schema.yml"
#          aws_region: "us-east-1"
#          aws_role_arn: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
#          aws_role_session_name: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
#          aws_access_key_id: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
#          aws_secret_access_key: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
#          aws_s3_bucket_name: ${{ env.AWS_S3_BUCKET_NAME }}
#          aws_s3_lock_bucket_name: ${{ env.AWS_S3_LOCK_BUCKET_NAME }}
#          gpg_passphrase: ${{ secrets.OHAI_GPG_PASSPHRASE }}
#          gpg_private_key_base64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }}

#      We cannot test from repo because this action does not support testing from testing bucket
#      - name: Test package installability
#        uses: newrelic/integrations-pkg-test-action/linux@v1
#        with:
#          tag: ${{ needs.create_prerelease.outputs.INTEGRATION_VERSION }}
#          integration: nri-${{ needs.create_prerelease.outputs.INTEGRATION_NAME }}
#          packageLocation: repo
#          stagingRepo: true
#          upgrade: false
