### ON MERGE TO MASTER   
###                                                            build_push_linux_artifacts  
###                                                           +-------------------------+ 
###                                                           |                         | 
###                                                           |  BUILD AND PUSH LINUX   | 
###                                       +-----------------  |  PACKAGES TO GITHUB     | 
###                                       |                   |                         | 
###      create_release                   |                   |                         | 
### +-----------------------+             |                   +-------------------------+ 
### |                       |             |                                               
### | CREATE A NEW RELEASE  |             |                                               
### | IN CASE ONE DEFINITION|             |                                               
### | HAS BEEN MODIFIED     |  -----------+                      
### | OR ADDED              |             |                    build_push_windows_artifacts                          
### |                       |             |                  +---------------------------+
### +-----------------------+             |                  |                           | _
###                                       |                  |  BUILD AND PUSHES WINDOWS |  |
###                                       +----------------- |  PACKAGES TO GITHUB       |  |
###                                                          |                           |  |
###                                                          |   Possibly executed twice |  | 
###                                                          +---------------------------+  |
###                                                             |___________________________|

on: 
#pull_request
  push:
    branches:
      - master

###
###   RELEASE CREATION # Creates a release if needed and loads variables for next jobs
###
name: Create Release
jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1' 
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/3.3.0/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      - name: Check exporters have been modified
        id: check
        run : |
          git fetch -at origin --unshallow
          source ./exporters/common_functions.sh
          getExporterPath
          loadVariables
          setStepOutput
      - name: Create Release
        id: create_release
        if: ${{ steps.check.outputs.CREATE_RELEASE }} == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.check.outputs.NAME }}-${{ steps.check.outputs.VERSION }}
          release_name: Release ${{ steps.check.outputs.NAME }} ${{ steps.check.outputs.VERSION }}
          body: |
            Changes in ${{ steps.check.outputs.NAME }} ${{ steps.check.outputs.VERSION }}
              - Exporter repository URL: ${{ steps.check.outputs.EXPORTER_REPO_URL }}
              - Commit or Tag of the exporter built: ${{ steps.check.outputs.EXPORTER_HEAD }}  
              - CHANGELOG: ${{ steps.check.outputs.EXPORTER_CHANGELOG }}  
          draft: false
          prerelease: false
    outputs:
      CREATE_RELEASE: ${{ steps.check.outputs.CREATE_RELEASE }}
      EXPORTER_PATH: ${{ steps.check.outputs.EXPORTER_PATH }}
      PACKAGE_LINUX: ${{ steps.check.outputs.PACKAGE_LINUX }}
      PACKAGE_WINDOWS: ${{ steps.check.outputs.PACKAGE_WINDOWS }}
      UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}

###
###   LINUX PACKAGING # In case a new release has been created and linux packages are needed build and push DEB, RPM, TAR 
###

  build_push_linux_artifacts:
    needs: [create_release]
    name: Push Linux Artifacts
    runs-on: ubuntu-latest
    if: ${{ needs.create_release.outputs.CREATE_RELEASE == 'true' && needs.create_release.outputs.PACKAGE_LINUX == 'true'}}
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1' 
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install rpm ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/3.3.0/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      - name: package linux
        id: package
        run : |
          export GOPATH=$(go env GOPATH)
          export EXPORTER_PATH=${{ needs.create_release.outputs.EXPORTER_PATH }}
          source ././exporters/common_functions.sh
          loadVariables
          packageLinux
          setStepOutput
      - name: Upload Release Asset DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.UPLOAD_URL }} 
          asset_path: ./exporters/${{ steps.package.outputs.NAME }}/target/packages/deb/${{ steps.package.outputs.NAME }}_${{ steps.package.outputs.VERSION }}-1_amd64.deb
          asset_name: ${{ steps.package.outputs.NAME }}_${{ steps.package.outputs.VERSION }}-1_amd64.deb
          asset_content_type: deb package
      - name: Upload Release Asset TAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.UPLOAD_URL }}
          asset_path: ./exporters/${{ steps.package.outputs.NAME }}/target/packages/tarball/${{ steps.package.outputs.NAME }}_linux_${{ steps.package.outputs.VERSION }}_amd64.tar.gz
          asset_name: ${{ steps.package.outputs.NAME }}_linux_${{ steps.package.outputs.VERSION }}_amd64.tar.gz
          asset_content_type: tarball
      - name: Upload Release Asset RPM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.UPLOAD_URL }} 
          asset_path: ./exporters/${{ steps.package.outputs.NAME }}/target/packages/rpm/${{ steps.package.outputs.NAME }}-${{ steps.package.outputs.VERSION }}-1.x86_64.rpm
          asset_name: ${{ steps.package.outputs.NAME }}-${{ steps.package.outputs.VERSION }}-1.x86_64.rpm
          asset_content_type: rpm package


###
###   Windows Packaging # In case a new release has been created and Windows packages are needed build and push MSI
###

  build_push_windows_artifacts:
    name: Create MSI
    runs-on: windows-2019
    needs: [create_release]
    if: ${{ needs.create_release.outputs.CREATE_RELEASE == 'true' && needs.create_release.outputs.PACKAGE_WINDOWS == 'true' }}
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/newrelic/newrelic-prometheus-exporters-packages
    strategy:
      matrix:
        goarch: [amd64 ,386]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/newrelic/newrelic-prometheus-exporters-packages
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1'
      #- name: Get PFX certificate from GH secrets
      #  shell: bash
      #  run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > mycert.pfx
      - name: Load Variables
        id: load_variables
        shell: bash
        run: |
          choco install yq
          export EXPORTER_PATH=${{ needs.create_release.outputs.EXPORTER_PATH }}
          source ././exporters/common_functions.sh
          loadVariables
          setStepOutput 
      - name : CreateMSI
        shell: pwsh
        run: |
          .\exporters\${{ steps.load_variables.outputs.NAME }}\win_build.ps1 -arch ${{ matrix.goarch }} -exporterHead ${{ steps.load_variables.outputs.EXPORTER_HEAD }} -exporterName ${{ steps.load_variables.outputs.NAME }} -exporterURL ${{ steps.load_variables.outputs.EXPORTER_REPO_URL }}
          .\exporters\win_msi_build.ps1 -arch ${{ matrix.goarch }} -exporterName ${{ steps.load_variables.outputs.NAME }} -version ${{ steps.load_variables.outputs.VERSION }}
        # -pfx_certificate_base64 "$env:PFX_CERTIFICATE_BASE64" -pfx_passphrase "$env:PFX_PASSPHRASE"
      - name: Upload Release Asset MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.UPLOAD_URL }} 
          asset_path: ${{ github.workspace }}/src/github.com/newrelic/newrelic-prometheus-exporters-packages/exporters/${{ steps.load_variables.outputs.NAME }}/target/packages/msi/${{ steps.load_variables.outputs.NAME }}-${{ matrix.goarch }}.msi
          asset_name: ${{ steps.load_variables.outputs.NAME }}-${{ matrix.goarch }}.msi
          asset_content_type: msi package
      
